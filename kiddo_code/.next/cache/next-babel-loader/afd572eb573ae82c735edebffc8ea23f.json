{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/kiddo_code/components/Homepage/Showcase/showcase.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Flickity from 'react-flickity-component';\nconst flickityOptions = {\n  initialIndex: 0,\n  accessibility: true,\n  pageDots: false,\n  wrapAround: true\n};\n\nconst fetch = require('isomorphic-fetch');\n\nclass Showcase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalData: [],\n      showcaseData: []\n    };\n  }\n\n  componentDidMount() {\n    var query = `\n            query {\n                 homeShowcases{\n                        id,\n                        showcase_title,\n                        showcase_image{\n                          name,\n                          url\n                        },\n                        showcase_description\n                    }\n            }`;\n    var variables = {\n      \"id\": 3\n    };\n    fetch(process.env.GRAPHURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    }).then(response => response.json()).then(response => {\n      // console.log(response);\n      let finalResponse = response.data.homeShowcases;\n      this.setState({\n        originalData: finalResponse\n      });\n    });\n  } // getShowcasesData = (index) => {\n  //     let originalData = this.state.originalData;\n  //     this.setState({\n  //         showcaseData: originalData[index].homeShowcases\n  //     })\n  // }\n\n\n  render() {\n    const {\n      originalData\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"section\", {\n      className: \"bg-primary-alt showcase-sec-wrap inside-arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: \"row justify-content-left mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, __jsx(\"div\", {\n      className: \"col-lg-12 col-xl-12 text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }, __jsx(\"h2\", {\n      className: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, \"Showcase\"))), __jsx(\"div\", {\n      className: \"row justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, __jsx(\"div\", {\n      className: \"col-lg-12 col-xl-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      \"data-flickity\": \"{ \\\"imagesLoaded\\\": true, \\\"wrapAround\\\": true }\",\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }, originalData.length > 0 && __jsx(Flickity, {\n      className: 'carousel-cell' // default ''\n      ,\n      elementType: 'div' // default 'div'\n      ,\n      options: flickityOptions // takes flickity options {}\n      ,\n      disableImagesLoaded: false // default false\n      ,\n      reloadOnUpdate: true // default false\n      ,\n      static: true // default false\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 41\n      }\n    }, originalData.length > 0 && originalData.map((showcaseDataGet, index) => {\n      return __jsx(\"div\", {\n        key: index,\n        className: \"carousel-cell col-xl-4 col-lg-4 col-md-5 col-9 pb-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 53\n        }\n      }, __jsx(\"div\", {\n        className: \"carousel-cell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 57\n        }\n      }, __jsx(\"img\", {\n        src: showcaseDataGet.showcase_image.url ? process.env.GRAPHIMAGEURL + showcaseDataGet.showcase_image.url : \"/assets/images/female-2.jpg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 61\n        }\n      }), __jsx(\"div\", {\n        className: \"card-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 61\n        }\n      }, __jsx(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 65\n        }\n      }, showcaseDataGet.showcase_title), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 65\n        }\n      }, showcaseDataGet.showcase_description))));\n    }))))))));\n  }\n\n}\n\nexport default Showcase;","map":{"version":3,"sources":["/home/dell/Desktop/kiddo_code/components/Homepage/Showcase/showcase.js"],"names":["React","Component","Flickity","flickityOptions","initialIndex","accessibility","pageDots","wrapAround","fetch","require","Showcase","constructor","props","state","originalData","showcaseData","componentDidMount","query","variables","process","env","GRAPHURL","method","headers","body","JSON","stringify","then","response","json","finalResponse","data","homeShowcases","setState","render","length","map","showcaseDataGet","index","showcase_image","url","GRAPHIMAGEURL","showcase_title","showcase_description"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Flickity from 'react-flickity-component';\nconst flickityOptions = {\n    initialIndex: 0,\n    accessibility: true,\n    pageDots: false,\n    wrapAround: true\n}\n\nconst fetch = require('isomorphic-fetch');\n\nclass Showcase extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            originalData: [],\n            showcaseData: []\n        };\n    }\n\n    componentDidMount() {\n        var query = `\n            query {\n                 homeShowcases{\n                        id,\n                        showcase_title,\n                        showcase_image{\n                          name,\n                          url\n                        },\n                        showcase_description\n                    }\n            }`;\n        var variables = {\n            \"id\": 3\n        }\n        fetch(process.env.GRAPHURL, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ query, variables }),\n            })\n            .then(response => response.json())\n            .then((response) => {\n                // console.log(response);\n                let finalResponse = response.data.homeShowcases;\n                this.setState({\n                    originalData: finalResponse\n                });\n            });\n\n        \n    }\n    // getShowcasesData = (index) => {\n    //     let originalData = this.state.originalData;\n\n    //     this.setState({\n    //         showcaseData: originalData[index].homeShowcases\n\n    //     })\n    // }\n    render(){\n\n        const { originalData } = this.state;\n        \n        return (\n            <>\n                <section className=\"bg-primary-alt showcase-sec-wrap inside-arrow\">\n                    <div className=\"container\">\n                        <div className=\"row justify-content-left mb-4\">\n                            <div className=\"col-lg-12 col-xl-12 text-left\">\n                                <h2 className=\"h1\">Showcase</h2>\n                            </div>\n                        </div>\n                        <div className=\"row justify-content-center\">\n                            <div className=\"col-lg-12 col-xl-12\">\n                                <div data-flickity='{ \"imagesLoaded\": true, \"wrapAround\": true }' className=\"mb-5\">\n                                    {\n                                        originalData.length > 0 &&\n                                        <Flickity\n                                            className={'carousel-cell'} // default ''\n                                            elementType={'div'} // default 'div'\n                                            options={flickityOptions} // takes flickity options {}\n                                            disableImagesLoaded={false} // default false\n                                            reloadOnUpdate={true} // default false\n                                            static={true} // default false\n                                        >\n                                        {\n                                            originalData.length > 0 &&\n                                            originalData.map((showcaseDataGet, index) => {\n                                                return (\n                                                    <div key={index} className=\"carousel-cell col-xl-4 col-lg-4 col-md-5 col-9 pb-1\">\n                                                        <div className=\"carousel-cell\">\n\n                                                            <img src={showcaseDataGet.showcase_image.url ? process.env.GRAPHIMAGEURL + showcaseDataGet.showcase_image.url : \"/assets/images/female-2.jpg\" } />\n                                                            <div className=\"card-wrap\">\n                                                                <h4>{showcaseDataGet.showcase_title}</h4>\n                                                                <p>{showcaseDataGet.showcase_description}</p>\n                                                            </div>\n                                                        </div>\n                                                    </div> \n                                                )\n                                            })\n                                        }\n                                        </Flickity>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </>\n        )\n    }\n}\n\nexport default Showcase;"]},"metadata":{},"sourceType":"module"}